// Variables globales
let ejerciciosGenerados = [];
let configuracionActual = {};
// isOfflineMode se obtiene de config.js - no redeclarar aqu√≠

// ‚úÖ NUEVO: Flag para controlar la inicializaci√≥n
let isAppInitialized = false;

// Inicializaci√≥n cuando el DOM est√° listo
document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ Inicializando Matem√°gica PWA...');
    
    // ‚úÖ NUEVO: Esperar a que el sistema de autenticaci√≥n est√© listo
    if (window.welcomeAuthManager && window.welcomeAuthManager.isAuthenticated()) {
        initializeApp();
    } else {
        // Escuchar evento de autenticaci√≥n exitosa
        window.addEventListener('userAuthenticated', initializeApp);
        console.log('‚è≥ Esperando autenticaci√≥n del usuario...');
    }
});

// ‚úÖ NUEVO: Funci√≥n de inicializaci√≥n separada
function initializeApp() {
    if (isAppInitialized) {
        console.log('‚ÑπÔ∏è App ya inicializada, saltando...');
        return;
    }
    
    console.log('üéØ Inicializando aplicaci√≥n principal...');
    
    // Verificar disponibilidad de APIs (sin Supabase si no autenticado)
    verificarAPIs();
    
    // Configurar eventos
    configurarEventos();
    
    // Cargar datos del usuario
    cargarDatosUsuario();
    
    // Configurar modo h√≠brido
    if (window.MathModeSystem) {
        window.MathModeSystem.updateModeDisplay();
    }
    
    isAppInitialized = true;
    console.log('‚úÖ Matem√°gica PWA inicializada correctamente');
}

function verificarAPIs() {
    // Verificar Gemini AI
    const geminiDisponible = window.isGeminiConfigured && window.isGeminiConfigured();
    console.log('ü§ñ Gemini AI disponible:', geminiDisponible);
    
    // ‚úÖ CORREGIDO: Verificar Supabase de manera m√°s directa y robusta
    let supabaseDisponible = false;
    if (window.welcomeAuthManager && window.welcomeAuthManager.isAuthenticated()) {
        // Verificar si tenemos un cliente de Supabase funcional
        supabaseDisponible = !!(window.supabaseClient && window.authService);
        console.log('‚òÅÔ∏è Supabase disponible:', supabaseDisponible);
        
        // Informaci√≥n adicional para debugging
        if (supabaseDisponible) {
            console.log('‚úÖ Supabase cliente y servicios disponibles');
        } else {
            console.log('‚ö†Ô∏è Usuario autenticado pero Supabase no disponible');
            console.log('- supabaseClient:', !!window.supabaseClient);
            console.log('- authService:', !!window.authService);
        }
    } else {
        console.log('‚òÅÔ∏è Supabase: Usuario no autenticado, modo offline');
    }
    
    // Mostrar estado en UI
    mostrarEstadoAPIs(geminiDisponible, supabaseDisponible);
}

function mostrarEstadoAPIs(gemini, supabase) {
    // ‚úÖ MEJORADO: Indicadores visuales m√°s informativos
    const statusContainer = document.getElementById('api-status');
    if (statusContainer) {
        let statusHTML = '<div class="flex gap-2 text-sm">';
        
        if (gemini) {
            statusHTML += '<span class="bg-green-100 text-green-800 px-2 py-1 rounded">ü§ñ IA Activa</span>';
        } else {
            statusHTML += '<span class="bg-yellow-100 text-yellow-800 px-2 py-1 rounded">ü§ñ IA Offline</span>';
        }
        
        if (supabase) {
            statusHTML += '<span class="bg-blue-100 text-blue-800 px-2 py-1 rounded">‚òÅÔ∏è Cloud Activo</span>';
        } else {
            statusHTML += '<span class="bg-gray-100 text-gray-800 px-2 py-1 rounded">‚òÅÔ∏è Modo Local</span>';
        }
        
        statusHTML += '</div>';
        statusContainer.innerHTML = statusHTML;
    }
    
    if (!gemini && !supabase) {
        console.warn('‚ö†Ô∏è Funcionando en modo completamente offline');
    }
}

function configurarEventos() {
    // Eventos para generaci√≥n de ejercicios
    const btnGenerarIA = document.getElementById('btn-generar-ia');
    const btnGenerarOffline = document.getElementById('btn-generar-offline');
    
    if (btnGenerarIA) {
        btnGenerarIA.addEventListener('click', () => generarEjercicios('ia'));
    }
    
    if (btnGenerarOffline) {
        btnGenerarOffline.addEventListener('click', () => generarEjercicios('offline'));
    }
    
    // Eventos para resultados
    const btnDescargarPDF = document.getElementById('btn-descargar-pdf');
    const btnGenerarCuento = document.getElementById('btn-generar-cuento');
    
    if (btnDescargarPDF) {
        btnDescargarPDF.addEventListener('click', descargarPDF);
    }
    
    if (btnGenerarCuento) {
        btnGenerarCuento.addEventListener('click', generarCuentoMatematico);
    }
    
    // Cerrar sesi√≥n
    const btnCerrarSesion = document.getElementById('btn-cerrar-sesion');
    if (btnCerrarSesion) {
        btnCerrarSesion.addEventListener('click', cerrarSesion);
    }
}

// ‚úÖ NUEVO: Configurar bot√≥n de cerrar sesi√≥n
function configurarCerrarSesion() {
    const btnCerrarSesion = document.getElementById('btn-cerrar-sesion');
    if (btnCerrarSesion) {
        btnCerrarSesion.addEventListener('click', async () => {
            console.log('üëã Iniciando cierre de sesi√≥n...');
            
            // Mostrar confirmaci√≥n
            const confirmar = confirm('¬øEst√°s seguro de que quieres cerrar sesi√≥n?');
            if (!confirmar) return;
            
            try {
                // Usar el manager de autenticaci√≥n para cerrar sesi√≥n
                if (window.welcomeAuthManager) {
                    await window.welcomeAuthManager.signOut();
                } else if (window.authManager) {
                    await window.authManager.signOut();
                }
                
                console.log('‚úÖ Sesi√≥n cerrada exitosamente');
                
            } catch (error) {
                console.error('‚ùå Error cerrando sesi√≥n:', error);
                // Fallback: recargar la p√°gina
                window.location.reload();
            }
        });
        
        console.log('üîó Bot√≥n de cerrar sesi√≥n configurado');
    }
}

function cargarDatosUsuario() {
    // ‚úÖ CORREGIDO: Usar el nuevo sistema de autenticaci√≥n
    let user = null;
    
    if (window.welcomeAuthManager && window.welcomeAuthManager.isAuthenticated()) {
        user = window.welcomeAuthManager.getCurrentUser();
    } else {
        // Fallback a localStorage para compatibilidad
        const userData = localStorage.getItem('currentUser');
        if (userData) {
            try {
                user = JSON.parse(userData);
            } catch (error) {
                console.error('‚ùå Error al cargar datos del usuario desde localStorage:', error);
            }
        }
    }
    
    if (user) {
        console.log('üë§ Usuario cargado:', user.name || user.email);
        actualizarUIUsuario(user);
    } else {
        console.log('üë§ No hay usuario autenticado');
    }
}

function actualizarUIUsuario(user) {
    // ‚úÖ MEJORADO: Actualizaci√≥n m√°s robusta de la UI
    const nombreUsuario = user.name || user.email || 'Usuario';
    
    // Actualizar nombre del usuario en elementos espec√≠ficos del dashboard
    const elementosNombre = document.querySelectorAll('[data-user-name], #nombre-usuario, #user-name');
    elementosNombre.forEach(el => {
        if (el && el.textContent !== nombreUsuario) {
            el.textContent = nombreUsuario;
        }
    });
    
    // Actualizar avatar si existe
    const elementosAvatar = document.querySelectorAll('[data-user-avatar], #avatar-usuario, #user-avatar');
    elementosAvatar.forEach(el => {
        if (el && user.avatar) {
            el.src = user.avatar;
            el.alt = `Avatar de ${nombreUsuario}`;
        }
    });
    
    // Actualizar email si est√° disponible
    const elementosEmail = document.querySelectorAll('[data-user-email], #email-usuario');
    elementosEmail.forEach(el => {
        if (el && user.email) {
            el.textContent = user.email;
        }
    });
}

async function generarEjercicios(metodo = 'offline') {
    const nivel = document.getElementById('nivelSelect')?.value || '1';
    const cantidad = document.getElementById('cantidadSelect')?.value || '10';
    const tipo = document.getElementById('tipoSelect')?.value || 'mixto';
    
    configuracionActual = { nivel, cantidad, tipo, metodo };
    
    console.log('üéØ Generando ejercicios:', configuracionActual);
    
    mostrarCarga(`Generando ${cantidad} ejercicios de nivel ${nivel}...`);
    
    try {
        let ejercicios = [];
        
        // ‚úÖ CORREGIDO: Verificar disponibilidad de IA de forma m√°s robusta
        const puedeUsarIA = metodo === 'ia' && 
                           window.isGeminiConfigured && 
                           window.isGeminiConfigured() && 
                           !window.MathModeSystem?.isOfflineMode();
        
        if (puedeUsarIA) {
            console.log('ü§ñ Intentando generar con IA...');
            try {
                ejercicios = await generarConIA(configuracionActual);
            } catch (error) {
                console.warn('‚ö†Ô∏è Error con IA, fallback a offline:', error.message);
                ejercicios = generarOffline(configuracionActual);
            }
        } else {
            // Usar generador offline
            ejercicios = generarOffline(configuracionActual);
        }
        
        if (ejercicios && ejercicios.length > 0) {
            ejerciciosGenerados = ejercicios;
            mostrarEjercicios(ejercicios);
            
            // ‚úÖ CORREGIDO: Guardar solo si el usuario est√° autenticado
            if (window.MathModeSystem && window.welcomeAuthManager?.isAuthenticated()) {
                try {
                    await window.MathModeSystem.saveDataHybrid(
                        'ultimo-ejercicio-generado',
                        { ejercicios, configuracion: configuracionActual, fecha: new Date().toISOString() }
                    );
                } catch (error) {
                    console.warn('‚ö†Ô∏è No se pudo guardar en cloud, solo local:', error.message);
                    // Guardar solo en localStorage como fallback
                    localStorage.setItem('ultimo-ejercicio-generado', JSON.stringify({
                        ejercicios, configuracion: configuracionActual, fecha: new Date().toISOString()
                    }));
                }
            }
            
            if (window.mostrarNotificacion) {
                window.mostrarNotificacion(`‚úÖ ${ejercicios.length} ejercicios generados correctamente`, 'success');
            }
        } else {
            throw new Error('No se pudieron generar ejercicios');
        }
        
    } catch (error) {
        console.error('‚ùå Error generando ejercicios:', error);
        
        if (window.mostrarNotificacion) {
            window.mostrarNotificacion('‚ùå Error al generar ejercicios. Intentando modo offline...', 'warning');
        }
        
        // Fallback a offline
        if (metodo === 'ia') {
            return generarEjercicios('offline');
        } else {
            alert('Error al generar ejercicios. Por favor intenta nuevamente.');
        }
    } finally {
        ocultarCarga();
    }
}

async function generarConIA(config) {
    if (!window.generarEjerciciosConGemini) {
        throw new Error('Generador de IA no disponible');
    }
    
    console.log('ü§ñ Generando con Gemini AI...');
    return await window.generarEjerciciosConGemini(
        parseInt(config.nivel),
        parseInt(config.cantidad),
        config.tipo
    );
}

function generarOffline(config) {
    console.log('üìö Generando con plantillas offline...');
    
    const ejercicios = [];
    const cantidad = parseInt(config.cantidad);
    const nivel = parseInt(config.nivel);
    const tipo = config.tipo;
    
    for (let i = 0; i < cantidad; i++) {
        let ejercicio;
        
        if (tipo === 'mixto') {
            ejercicio = Math.random() > 0.5 ? generarSuma(nivel) : generarResta(nivel);
        } else if (tipo === 'suma') {
            ejercicio = generarSuma(nivel);
        } else {
            ejercicio = generarResta(nivel);
        }
        
        ejercicios.push({
            numero: i + 1,
            operacion: ejercicio.operacion,
            resultado: ejercicio.resultado,
            tipo: ejercicio.tipo,
            nivel: nivel
        });
    }
    
    return ejercicios;
}

function generarSuma(nivel) {
    let num1, num2;
    
    switch (nivel) {
        case 1: // F√°cil - sin reserva
            num1 = Math.floor(Math.random() * 45) + 10; // 10-54
            num2 = Math.floor(Math.random() * (99 - num1 - 10)) + 10; // Asegurar que no pase de 99
            break;
        case 2: // Medio - con reserva
            num1 = Math.floor(Math.random() * 45) + 15; // 15-59
            num2 = Math.floor(Math.random() * 40) + 15; // 15-54, puede dar reserva
            break;
        case 3: // Dif√≠cil - mixto
            num1 = Math.floor(Math.random() * 60) + 10; // 10-69
            num2 = Math.floor(Math.random() * 50) + 10; // 10-59
            break;
        default:
            num1 = Math.floor(Math.random() * 40) + 10;
            num2 = Math.floor(Math.random() * 40) + 10;
    }
    
    return {
        operacion: `${num1} + ${num2} = ____`,
        resultado: num1 + num2,
        tipo: 'suma'
    };
}

function generarResta(nivel) {
    let num1, num2;
    
    switch (nivel) {
        case 1: // F√°cil - sin prestado
            num1 = Math.floor(Math.random() * 40) + 50; // 50-89
            num2 = Math.floor(Math.random() * 30) + 10; // 10-39
            // Asegurar que no hay prestado
            if (num1 % 10 < num2 % 10) {
                num2 = num1 % 10 + Math.floor(num2 / 10) * 10;
            }
            break;
        case 2: // Medio - con prestado
            num1 = Math.floor(Math.random() * 50) + 30; // 30-79
            num2 = Math.floor(Math.random() * 40) + 15; // 15-54
            break;
        case 3: // Dif√≠cil - mixto
            num1 = Math.floor(Math.random() * 60) + 25; // 25-84
            num2 = Math.floor(Math.random() * (num1 - 5)) + 5; // 5 hasta num1-5
            break;
        default:
            num1 = Math.floor(Math.random() * 50) + 30;
            num2 = Math.floor(Math.random() * 25) + 5;
    }
    
    return {
        operacion: `${num1} - ${num2} = ____`,
        resultado: num1 - num2,
        tipo: 'resta'
    };
}

function mostrarEjercicios(ejercicios) {
    const container = document.getElementById('ejercicios-container');
    const seccionResultados = document.getElementById('seccion-resultados');
    
    if (!container || !seccionResultados) {
        console.warn('‚ö†Ô∏è Contenedores de ejercicios no encontrados');
        return;
    }
    
    container.innerHTML = '';
    
    ejercicios.forEach((ejercicio, index) => {
        const card = document.createElement('div');
        card.className = 'ejercicio-card';
        card.innerHTML = `
            <div class="ejercicio-numero">Ejercicio ${ejercicio.numero || index + 1}</div>
            <div class="ejercicio-operacion">${ejercicio.operacion}</div>
            <div class="text-sm text-gray-600 mt-2">
                Nivel: ${getNivelTexto(ejercicio.nivel)} | Tipo: ${ejercicio.tipo}
            </div>
        `;
        container.appendChild(card);
    });
    
    seccionResultados.classList.remove('hidden');
    
    // Scroll suave a los resultados
    seccionResultados.scrollIntoView({ behavior: 'smooth' });
}

function getNivelTexto(nivel) {
    switch (parseInt(nivel)) {
        case 1: return 'üü¢ F√°cil';
        case 2: return 'üü° Medio';
        case 3: return 'üî¥ Dif√≠cil';
        default: return 'Desconocido';
    }
}

function mostrarCarga(mensaje = 'Cargando...') {
    const loadingOverlay = document.getElementById('loading-overlay');
    const loadingText = document.getElementById('loading-text');
    
    if (loadingText) loadingText.textContent = mensaje;
    if (loadingOverlay) loadingOverlay.classList.remove('hidden');
}

function ocultarCarga() {
    const loadingOverlay = document.getElementById('loading-overlay');
    if (loadingOverlay) loadingOverlay.classList.add('hidden');
}

async function descargarPDF() {
    if (!ejerciciosGenerados || ejerciciosGenerados.length === 0) {
        alert('No hay ejercicios para descargar');
        return;
    }
    
    console.log('üìÑ Generando PDF...');
    mostrarCarga('Preparando PDF para descarga...');
    
    try {
        if (window.jsPDF) {
            await generarPDFConJSPDF();
        } else {
            console.warn('‚ö†Ô∏è jsPDF no disponible, usando m√©todo alternativo');
            window.print();
        }
    } catch (error) {
        console.error('‚ùå Error al generar PDF:', error);
        alert('Error al generar PDF. Usando impresi√≥n del navegador...');
        window.print();
    } finally {
        ocultarCarga();
    }
}

async function generarPDFConJSPDF() {
    const { jsPDF } = window.jsPDF;
    const pdf = new jsPDF();
    
    // Configurar fuente y t√≠tulo
    pdf.setFontSize(20);
    pdf.text('Matem√°gica - Ejercicios de Pr√°ctica', 20, 30);
    
    pdf.setFontSize(12);
    pdf.text(`Nivel: ${getNivelTexto(configuracionActual.nivel)}`, 20, 45);
    pdf.text(`Cantidad: ${configuracionActual.cantidad} ejercicios`, 20, 55);
    pdf.text(`Fecha: ${new Date().toLocaleDateString()}`, 20, 65);
    
    // Agregar ejercicios
    let yPos = 85;
    const lineHeight = 15;
    
    ejerciciosGenerados.forEach((ejercicio, index) => {
        if (yPos > 250) { // Nueva p√°gina
            pdf.addPage();
            yPos = 30;
        }
        
        pdf.setFontSize(14);
        pdf.text(`${index + 1}. ${ejercicio.operacion}`, 30, yPos);
        yPos += lineHeight * 2;
    });
    
    // Descargar
    pdf.save(`matematica-ejercicios-${Date.now()}.pdf`);
    
    if (window.mostrarNotificacion) {
        window.mostrarNotificacion('‚úÖ PDF descargado correctamente', 'success');
    }
}

async function generarCuentoMatematico() {
    if (!ejerciciosGenerados || ejerciciosGenerados.length === 0) {
        alert('Primero genera algunos ejercicios');
        return;
    }
    
    console.log('üìñ Generando cuento matem√°tico...');
    mostrarCarga('Creando un cuento m√°gico...');
    
    try {
        let cuento;
        
        if (window.generarCuentoConGemini && !window.MathModeSystem?.isOfflineMode()) {
            cuento = await window.generarCuentoConGemini(ejerciciosGenerados.slice(0, 3));
        } else {
            cuento = generarCuentoOffline();
        }
        
        mostrarModalCuento(cuento);
        
    } catch (error) {
        console.error('‚ùå Error generando cuento:', error);
        mostrarModalCuento(generarCuentoOffline());
    } finally {
        ocultarCarga();
    }
}

function generarCuentoOffline() {
    const cuentos = [
        {
            titulo: "La Aventura de los N√∫meros M√°gicos",
            contenido: `Hab√≠a una vez una peque√±a maga llamada Luna que viv√≠a en el Reino de los N√∫meros. 
            Un d√≠a, encontr√≥ un cofre m√°gico que solo se abr√≠a resolviendo operaciones matem√°ticas.
            
            "Para abrir este cofre", pens√≥ Luna, "debo ser muy cuidadosa con mis c√°lculos."
            
            Luna sab√≠a que cada n√∫mero ten√≠a su propia personalidad: los n√∫meros grandes eran orgullosos, 
            los peque√±os eran t√≠midos, y todos juntos formaban hermosas operaciones.
            
            Con su varita m√°gica, Luna comenz√≥ a resolver cada problema, uno por uno, hasta que el cofre 
            se abri√≥ revelando el tesoro m√°s hermoso: ¬°la satisfacci√≥n de aprender matem√°ticas!`
        },
        {
            titulo: "El Robot Calculador",
            contenido: `En una ciudad futurista, hab√≠a un robot llamado Calc que ayudaba a los ni√±os con las matem√°ticas.
            
            Calc ten√≠a una pantalla brillante donde aparec√≠an n√∫meros que bailaban y se transformaban en sumas y restas.
            
            "¬°Beep beep!", dec√≠a Calc. "Las matem√°ticas son como un juego divertido. Cada operaci√≥n es un rompecabezas 
            que podemos resolver juntos."
            
            Los ni√±os del futuro aprendieron que las matem√°ticas no eran dif√≠ciles, solo necesitaban pr√°ctica y 
            un amigo robot que los motivara a seguir intentando.`
        }
    ];
    
    return cuentos[Math.floor(Math.random() * cuentos.length)];
}

function mostrarModalCuento(cuento) {
    const modal = document.getElementById('modal-cuento');
    const contenido = document.getElementById('contenido-cuento');
    
    if (!modal || !contenido) {
        console.warn('‚ö†Ô∏è Modal de cuento no encontrado');
        return;
    }
    
    contenido.innerHTML = `
        <h3 class="text-xl font-bold text-purple-600 mb-4">${cuento.titulo}</h3>
        <div class="prose text-gray-700 leading-relaxed">
            ${cuento.contenido.split('\n').map(p => `<p class="mb-3">${p.trim()}</p>`).join('')}
        </div>
        <div class="mt-6 p-4 bg-purple-50 rounded-lg">
            <p class="text-sm text-purple-700">
                ‚ú® <strong>¬°Ahora es tu turno!</strong> Resuelve los ejercicios como los h√©roes de este cuento.
            </p>
        </div>
    `;
    
    toggleModalCuento(true);
}

// Funci√≥n para mostrar/ocultar el modal de cuento
function toggleModalCuento(mostrar = false) {
    const modal = document.getElementById('modal-cuento');
    if (!modal) return;
    
    if (mostrar) {
        // Eliminar hidden y agregar flex correctamente
        modal.classList.remove('hidden');
        modal.style.display = 'flex';
        document.body.style.overflow = 'hidden'; // Prevenir scroll
    } else {
        // Ocultar correctamente
        modal.classList.add('hidden');
        modal.style.display = 'none';
        document.body.style.overflow = ''; // Restaurar scroll
    }
}

// Configurar botones para abrir/cerrar el modal de cuento
function configurarModalCuento() {
    const btnGenerarCuento = document.getElementById('btn-generar-cuento');
    const btnCerrarCuento = document.getElementById('btn-cerrar-cuento');
    
    if (btnGenerarCuento) {
        btnGenerarCuento.addEventListener('click', () => {
            generarCuento().then(() => {
                toggleModalCuento(true);
            });
        });
    }
    
    if (btnCerrarCuento) {
        btnCerrarCuento.addEventListener('click', () => {
            toggleModalCuento(false);
        });
    }
    
    // Cerrar modal al hacer clic fuera del contenido
    const modal = document.getElementById('modal-cuento');
    if (modal) {
        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                toggleModalCuento(false);
            }
        });
    }
}

// Actualizar funci√≥n de inicializaci√≥n
function inicializarApp() {
    console.log('üöÄ Inicializando Matem√°gica PWA...');
    
    // Verificar si el usuario ya est√° autenticado
    const isAuthenticated = window.authManager?.isAuthenticated() || 
                           window.welcomeAuthManager?.isAuthenticated();
    
    if (isAuthenticated) {
        console.log('üéØ Inicializando aplicaci√≥n principal...');
        inicializarAplicacionPrincipal();
    } else {
        console.log('‚è≥ Esperando autenticaci√≥n del usuario...');
        // Esperar evento de autenticaci√≥n
        window.addEventListener('userAuthenticated', (event) => {
            console.log('üë§ Usuario autenticado, inicializando app...');
            inicializarAplicacionPrincipal();
        });
    }
}

function inicializarAplicacionPrincipal() {
    // Configurar eventos principales
    configurarEventos();
    
    // Configurar cerrar sesi√≥n
    configurarCerrarSesion();
    
    // Cargar datos del usuario
    cargarDatosUsuario();
    
    // Verificar servicios disponibles
    verificarServicios();
    
    console.log('‚úÖ Matem√°gica PWA inicializada correctamente');
}

function cerrarSesion() {
    if (confirm('¬øEst√°s seguro de que quieres cerrar sesi√≥n?')) {
        console.log('üö™ Cerrando sesi√≥n...');
        
        // ‚úÖ CORREGIDO: Usar el nuevo sistema de autenticaci√≥n
        if (window.welcomeAuthManager) {
            window.welcomeAuthManager.signOut();
        } else {
            // Fallback para limpiar datos manualmente
            localStorage.removeItem('currentUser');
            localStorage.removeItem('isAuthenticated');
            
            if (window.mostrarNotificacion) {
                window.mostrarNotificacion('üëã Sesi√≥n cerrada. ¬°Hasta pronto!', 'success');
            }
            
            setTimeout(() => {
                window.location.href = '/index.html';
            }, 1000);
        }
    }
}

// ‚úÖ NUEVO: Funci√≥n para verificar estado de autenticaci√≥n
function verificarAutenticacion() {
    if (window.welcomeAuthManager) {
        return window.welcomeAuthManager.isAuthenticated();
    }
    return localStorage.getItem('isAuthenticated') === 'true';
}

// Exportar funciones para uso global
window.MathApp = {
    generarEjercicios,
    descargarPDF,
    generarCuentoMatematico,
    ejerciciosGenerados: () => ejerciciosGenerados,
    configuracionActual: () => configuracionActual,
    // ‚úÖ NUEVO: Exportar funci√≥n de verificaci√≥n de autenticaci√≥n
    verificarAutenticacion,
    initializeApp
};

console.log('‚úÖ App.js cargado correctamente');